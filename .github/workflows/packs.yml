name: Packs

on:
    push: ~
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday

jobs:
    test-application-with-api-pack:
        runs-on: ubuntu-18.04

        name: "Test application with api-pack (PHP ${{ matrix.php }}, MySQL ${{ matrix.mysql }})"

        timeout-minutes: 25

        strategy:
            fail-fast: false
            matrix:
                php: [ 8.0 ]
                node: [ 10.x ]
                mysql: [ 5.7 ]

        env:
            APP_ENV: test
            DATABASE_URL: "mysql://root:root@127.0.0.1/monofony?serverVersion=${{ matrix.mysql }}"
            IS_DOCTRINE_ORM_SUPPORTED: true
            CORS_ALLOW_ORIGIN: "*"

        steps:
            -   uses: actions/checkout@v2

            -   name: Shutdown default MySQL
                run: sudo service mysql stop

            -   name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -   name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Paris, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install PHP dependencies
                run: composer install --no-interaction

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV || echo APP_ENV=$APP_ENV > .env.local

            -
                name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Install api-pack
                run: |
                    sed -i -e "s/\#\$syliusResources/\$syliusResources/g" config/services.yaml
                    sed -i -e "s/\#success_handler/success_handler/g" config/packages/security.yaml
                    sed -i -e "s/\#failure_handler/failure_handler/g" config/packages/security.yaml
                    sed -i -e "s/\#guard/guard/g" config/packages/security.yaml
                    sed -i -e "s/\#authenticators/authenticators/g" config/packages/security.yaml
                    sed -i -e "s/\#- lexik_jwt_authentication/- lexik_jwt_authentication/g" config/packages/security.yaml
                    composer require monofony/api-pack ^0.8

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit

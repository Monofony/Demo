name: Application

env:
    APP_ENV: test
    DATABASE_URL: mysql://root:root@127.0.0.1:3306/monofony_demo

on:
    push: ~
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday

jobs:
    static-checks:
        runs-on: ubuntu-latest

        name: "Static checks (PHP ${{ matrix.php }}"

        strategy:
            fail-fast: false
            matrix:
                php: [ 7.3 ]

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Warsaw, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-composer-

            -
                name: Install PHP dependencies
                run: composer install --prefer-dist --no-progress --no-scripts
                id: end-of-setup

            -
                name: Validate composer.json
                run: composer validate --strict
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Check for security vulnerabilities
                run: symfony security:check
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate coding standard
                run: make validate-coding-standard
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Twig templates
                run: make validate-twig
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Yaml files
                run: make validate-yaml-files
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Run Psalm
                run: make test-psalm
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Run PHPStan
                run: make test-psalm
                if: always() && steps.end-of-setup.outcome == 'success'

    test-application-without-frontend:
        runs-on: ubuntu-latest

        name: "Test non-JS application (PHP ${{ matrix.php }}, MySQL ${{ matrix.mysql }})"

        strategy:
            fail-fast: false
            matrix:
                php: [7.3]
                mysql: [5.7]

        steps:
            -   uses: actions/checkout@v2

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
                    collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
                    mysql version: '5.7' # Optional, default value is "latest". The version of the MySQL
                    mysql database: 'monofony_demo'
                    mysql root password: root

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "7.3"
                    coverage: none

            -
                name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v2
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-

            -
                name: Install dependencies
                if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer install --prefer-dist --no-progress --no-suggest

            -
                name: Dump env vars
                run: composer dump-env test

            -
                name: Cache Node packages
                uses: actions/cache@v2
                with:
                    path: '**/node_modules'
                    key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

            -
                name: Install node packages
                if: steps.yarn-cache.outputs.cache-hit != 'true'
                run: |
                    yarn install
                    yarn build

            -
                name: Install database
                run: bin/console doctrine:migration:migrate -n -vv

            -
                name: Test fixtures
                run: make test-fixtures

            -
                name: Test Behat with CLI
                run: make test-behat-with-cli


            -
                name: Test Behat without Javascript
                run: make test-behat-without-javascript

            -
                name: Test Doctrine migrations
                run: make test-doctrine-migrations
